webpackJsonp([74567762671254],{631:function(n,a){n.exports={data:{markdownRemark:{html:'<p>说到前端中间件，大多数人想到的估计会是nodejs但通常一个页面的数据是由多个接口提供，如果使用 nodejs 难免会陷入 callback hell 的局面. <!--more-->而解决 callback hell 的方案无非是 es6 中的 <code>Promise</code>， <code>Generator</code> 和 es7 提出的 <code>Async</code> 特性， 但 <code>Promise</code>， <code>Generator</code> 的解决方案并不大优雅， 对于我们这种技术能力有些薄弱的技术团队， 在后期的维护和拓展上有一些难度， 对于 <code>Async</code> 现在并没有哪一个版本的 nodejs 支持.</p>\n<h2>python</h2>\n<p>最后决定使用 Python 来实现中间件， 配合 tornado 异步 web 框架， 在性能上应该不会和 node 有太大的差别， 毕竟 Python 同步的写法更让人理解， Python 3.5.1 加入了 <code>Async</code> 语法糖，更好的支持了协程， tornado 最新版本也马上支持了 <code>Async</code>， tornado 的 Non-blocking HTTP server 和 Asynchronous HTTP client 也有巨大的优势， 能爽快的这样写代码了:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Index</span><span class="token punctuation">(</span>tornado<span class="token punctuation">.</span>web<span class="token punctuation">.</span>requstHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        http_client <span class="token operator">=</span> AsyncHTTPClient<span class="token punctuation">(</span><span class="token punctuation">)</span>\n        response <span class="token operator">=</span> <span class="token keyword">await</span> http_client<span class="token punctuation">.</span>fetch<span class="token punctuation">(</span><span class="token string">\'/api/index\'</span><span class="token punctuation">)</span>\n        data <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">.</span>encoding<span class="token punctuation">(</span><span class="token string">\'utf8\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        self<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">\'index.html\'</span><span class="token punctuation">,</span> <span class="token operator">**</span>data<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<h2>docker</h2>\n<p>公司的测试和生产环境上部署的是 centos, 通过手动编译 python 3.5.1 总是会安装上一个缺少类库依赖的版本，在网上找了一圈也没找到可直接安装的编译版本，centos 还真是一个稳(luo)定(hou)的发行版本，所以寻思着是否能通过 docker 运行一个 debian 的实例来解决，因为之前没有接触到 docker，一直认为运行 docker 就是运行一个虚拟主机，然后在虚拟机里面安装这种依赖，然后运行应用程序。</p>\n<p>但渐渐发现 docker 更像是一种服务，在 docker 中安装好各种依赖和环境，然后把项目文件挂载进 docker，最后执行应用启动命令，docker 会一直保持这条命令，只到错误退出，所以这更像是一个服务。同时你能把执行各种应用程序的 docker 镜像分享出去，当然你也可直接下载社区共享的各种应用程序的 docker 镜像，挂载自己项目的目录，然后直接运行。</p>\n<h2>总结</h2>\n<p>现在的前端开发不再是几年前写写页面，写写脚本这么简单了，有让你眼花缭乱的前端框架供你选择，重要的要了解各种框架的利弊、适用场景，根据自己的项目类型和团队技术水平，选择最合适的框架，选择项目的构建工具，甚至要了解和搭建项目运行环境，编写测试和发布脚本。</p>',excerpt:"说到前端中间件，大多数人想到的估计会是nodejs但通常一个页面的数据是由多个接口提供，如果使用 nodejs 难免会陷入 callback hell 的局面.  而解决 callback hell 的方案无非是 es…",fields:{slug:"/27ec26a39a",tags:[{name:"deploy",slug:"078f40fa23"},{name:"python",slug:"23eeeb4347"},{name:"docker",slug:"05b6053c41"}]},frontmatter:{date:"2015-12-09",path:"/middleware-deploy",title:"前端中间件实践和代码部署"}},site:{siteMetadata:{disqusShortName:"devharry",siteUrl:"https://goharry.io"}}},pathContext:{slug:"/27ec26a39a",prev:{excerpt:"201…",fields:{slug:"/f4f55eb734",tags:[{name:"log",slug:"dc1d71bbb5"},{name:"work",slug:"67e92c8765"}]},frontmatter:{path:"/talk-about-2015",title:"说说 2015",date:"2015-12-31T00:00:00.000Z"}},next:{excerpt:"webpack  是一款 js 模块管理工具， 能使用 commonjs 或者 es6 方式来管理 js 模块， 利用其 loader 插件还能做一些炫酷的事情， 比如利用 babel-loader 就能放心大胆的使用 es…",fields:{slug:"/4d4c26e465",tags:[{name:"javascript",slug:"de9b9ed78d"},{name:"webpack",slug:"424516ca53"},{name:"angular",slug:"d18b8624a0"}]},frontmatter:{path:"/angular-webpack",title:"使用 webpack 写 angular",date:"2015-11-12T00:00:00.000Z"}}}}}});
//# sourceMappingURL=path---27-ec-26-a-39-a-1efc4f098641aff2230d.js.map