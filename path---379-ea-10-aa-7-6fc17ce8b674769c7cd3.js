webpackJsonp([4491293492216],{632:function(n,s){n.exports={data:{markdownRemark:{html:'<p>得益于 virtual DOM 和 jsx, React 并不需要依赖于 DOM, 所以能在服务器上渲染 React 应用, 并且向客户端发送 HTML 代码. <!--more--></p>\n<h2>Babel es6+</h2>\n<p>Node 目前只支持部分 es6 特性，我们需要 Babel 把代码转换一次，新建 <code>.babelrc</code> 文件</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token punctuation">{</span>\n  <span class="token string">"presets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"es2015"</span><span class="token punctuation">,</span> <span class="token string">"react"</span><span class="token punctuation">,</span> <span class="token string">"stage-0"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"babel-plugin-transform-decorators-legacy"</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>为了自动转换代码，我们使用 gulp</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">const</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'gulp\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> babel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'gulp-babel\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ngulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"transform"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">"app/**/*.js"</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">babel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            presets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"es2015"</span><span class="token punctuation">,</span> <span class="token string">"react"</span><span class="token punctuation">,</span> <span class="token string">"stage-0"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n            plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"babel-plugin-transform-decorators-legacy"</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"build"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ngulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"watch"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span> <span class="token punctuation">{</span>\n    gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">"app/**/*.js"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"transform"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ngulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"default"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"transform"</span><span class="token punctuation">,</span> <span class="token string">"watch"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<h2>Async</h2>\n<p>React 在 server 中的 Lifecycle 有些不一样, 因为服务器对客户端是单向的，这样基本上只会出输出我们在 jsx 中定义好的 markup 代码，异步请求的数据并不会被渲染，所以我们需要定义一些钩子，让异步请求完成后再向客户端发送数据。</p>\n<p>React + Redux + React Router + immutable 应该是现在最稳定和常见的 React 应用组合，下面将以这个为例子：</p>\n<h3>Middleware</h3>\n<p>在 redux 中加入 promise middleware, 自动处理含有 promise 的 action：</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">promiseMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> <span class="token punctuation">{</span>promise<span class="token punctuation">,</span> type<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">}</span> <span class="token operator">=</span> action<span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>promise<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">const</span> SUCCESS <span class="token operator">=</span> type <span class="token operator">+</span> <span class="token string">"_SUCCESS"</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> REQUEST <span class="token operator">=</span> type <span class="token operator">+</span> <span class="token string">"_PENDING"</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> FAILURE <span class="token operator">=</span> type <span class="token operator">+</span> <span class="token string">"_FAILURE"</span><span class="token punctuation">;</span>\n\n        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">,</span> type<span class="token punctuation">:</span> REQUEST<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> data <span class="token operator">=</span> result <span class="token operator">&amp;&amp;</span> result<span class="token punctuation">.</span>data <span class="token operator">?</span> result<span class="token punctuation">.</span>data <span class="token punctuation">:</span> result<span class="token punctuation">;</span>\n            <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">,</span> data<span class="token punctuation">,</span> type<span class="token punctuation">:</span> SUCCESS<span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token operator">=></span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">,</span> error<span class="token punctuation">,</span> type<span class="token punctuation">:</span> FAILURE<span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h3>Action</h3>\n<p>在 action 中添加 promise：</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> GET_POST <span class="token operator">=</span> <span class="token string">"GET_POST"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getPost</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        type<span class="token punctuation">:</span> GET_POST<span class="token punctuation">,</span>\n        promise<span class="token punctuation">:</span> request<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`/posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>params<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h3>Reducer</h3>\n<p>middleware 会自动添加 promise 中各种状态的 action type, 所以在 reducer 中直接处理：</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>GET_POST<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../actions/post"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>Map<span class="token punctuation">,</span> List<span class="token punctuation">,</span> fromJS<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"immutable"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> initState <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    post<span class="token punctuation">:</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    isFetching<span class="token punctuation">:</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>state<span class="token operator">=</span>initState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">case</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>GET_POST<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_PENDING`</span></span><span class="token punctuation">:</span>\n            <span class="token keyword">return</span> state<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"isFetching"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>GET_POST<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_SUCCESS`</span></span><span class="token punctuation">:</span>\n            <span class="token keyword">return</span> state<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"isFetching"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"post"</span><span class="token punctuation">,</span> <span class="token function">fromJS</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">default</span><span class="token punctuation">:</span>\n            <span class="token keyword">return</span> state<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<h3>Container</h3>\n<p>在 Container 中加入 promises 钩子:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span>Component<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>connect<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-redux"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>getPost<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../actions/post"</span><span class="token punctuation">;</span>\n\n@<span class="token function">connect</span><span class="token punctuation">(</span>state <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        post<span class="token punctuation">:</span> state<span class="token punctuation">.</span>post<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"post"</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Post</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n\n    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">static</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span>\n        getPost\n    <span class="token punctuation">]</span>\n\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> <span class="token punctuation">{</span>post<span class="token punctuation">}</span>  <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>\n            <span class="token operator">&lt;</span>div<span class="token operator">></span>\n                <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span>post<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>\n          \t\t<span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span>post<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2>Server</h2>\n<p>在当前 route component 的所有 promise resolve 后才会向客户端发送数据</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> renderToString <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-dom/server"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> RouterContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-redux"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">fetchComponentData</span><span class="token punctuation">(</span>dispatch<span class="token punctuation">,</span> components<span class="token punctuation">,</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">const</span> promises <span class="token operator">=</span> components<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> current<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>current <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">.</span>promises <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>current <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">.</span>WrappedComponent <span class="token operator">?</span> current<span class="token punctuation">.</span>WrappedComponent<span class="token punctuation">.</span>promises <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>prev <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> fetch <span class="token operator">=</span> promises<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>promise <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">promise</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>fetch<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t<span class="token function">match</span><span class="token punctuation">(</span><span class="token punctuation">{</span> routes<span class="token punctuation">,</span> location<span class="token punctuation">:</span> req<span class="token punctuation">.</span>url <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> redirectLocation<span class="token punctuation">,</span> renderProps<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>redirectLocation<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">,</span> redirectLocation<span class="token punctuation">.</span>pathname <span class="token operator">+</span> redirectLocation<span class="token punctuation">.</span>search<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>renderProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">fetchComponentData</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>dispatch<span class="token punctuation">,</span> renderProps<span class="token punctuation">.</span>components<span class="token punctuation">,</span> renderProps<span class="token punctuation">.</span>params<span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span> <span class="token punctuation">{</span>\n                    <span class="token keyword">const</span> rootMarkup <span class="token operator">=</span> <span class="token function">renderToString</span><span class="token punctuation">(</span>\n                        <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">></span>\n                            <span class="token operator">&lt;</span>RouterContext <span class="token punctuation">{</span> <span class="token operator">...</span>renderProps <span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n                        <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span>\n                    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">const</span> initialState <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>\n                      \t<span class="token template-string"><span class="token string">`\n                          &lt;!DOCTYPE HTML>\n                          &lt;head>\n                              &lt;script>window.__INIT_STATE__ = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>initialState<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/script>\n                          &lt;/head>\n                          &lt;html>\n                              &lt;body>\n                                  &lt;div id="root"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>rootMarkup<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div>\n                              &lt;/body>\n                          &lt;/html>\n                      `</span></span><span class="token punctuation">;</span>\n                    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token operator">=></span> <span class="token punctuation">{</span>\n                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">\'Not found\'</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>',
excerpt:"得益于 virtual DOM 和 jsx, React 并不需要依赖于 DOM, 所以能在服务器上渲染 React 应用, 并且向客户端发送 HTML 代码.  Babel es6+ Node 目前只支持部分 es…",fields:{slug:"/379ea10aa7",tags:[{name:"react",slug:"266a1f7c2e"},{name:"redux",slug:"7490fe17ca"},{name:"node",slug:"36c4536996"}]},frontmatter:{date:"2016-07-21",path:"/react-server-side-rendering",title:"React Server Rendering"}},site:{siteMetadata:{disqusShortName:"devharry",siteUrl:"https://goharry.io"}}},pathContext:{slug:"/379ea10aa7",prev:{excerpt:"React 高阶组件简单来说, 就是一个 function 接受一个 component 作为参数, 最后返回一个新的组件, 高阶组件的概念来自于 Javascript 中的高阶函数。 高阶函数 因为函数在 Javascript…",fields:{slug:"/e3755c48d9",tags:[{name:"react",slug:"266a1f7c2e"}]},frontmatter:{path:"/react-hoc",title:"React 高阶组件",date:"2017-09-04T14:43:29.218Z"}},next:{excerpt:"Redis is an open source key-value store that functions as a data structure server. 下载镜像: 启动 redis 实例: 将 redis docker…",fields:{slug:"/b88b0a4ca2",tags:[{name:"docker",slug:"05b6053c41"},{name:"redis",slug:"86a1b907d5"}]},frontmatter:{path:"/redis-docker",title:"redis docker",date:"2016-04-04T00:00:00.000Z"}}}}}});
//# sourceMappingURL=path---379-ea-10-aa-7-6fc17ce8b674769c7cd3.js.map