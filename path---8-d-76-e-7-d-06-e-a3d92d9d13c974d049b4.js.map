{"version":3,"sources":["webpack:///path---8-d-76-e-7-d-06-e-a3d92d9d13c974d049b4.js","webpack:///./.cache/json/8-d-76-e-7-d-06-e.json"],"names":["webpackJsonp","637","module","exports","data","markdownRemark","html","excerpt","fields","slug","tags","name","frontmatter","date","path","title","site","siteMetadata","disqusShortName","siteUrl","pathContext","prev"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,oqLAA4xLC,QAAA,kHAAAC,QAAqOC,KAAA,cAAAC,OAA8BC,KAAA,aAAAF,KAAA,eAA0CE,KAAA,QAAAF,KAAA,eAAqCE,KAAA,OAAAF,KAAA,gBAAoCG,aAAgBC,KAAA,aAAAC,KAAA,sBAAAC,MAAA,aAAqEC,MAASC,cAAgBC,gBAAA,WAAAC,QAAA,wBAA8DC,aAAgBX,KAAA,cAAAY,MAA6Bd,QAAA,4HAAAC,QAAgJC,KAAA,cAAAC,OAA8BC,KAAA,QAAAF,KAAA,eAAqCE,KAAA,cAAAF,KAAA,gBAA2CG,aAAgBE,KAAA,wBAAAC,MAAA,sBAAAF,KAAA","file":"path---8-d-76-e-7-d-06-e-a3d92d9d13c974d049b4.js","sourcesContent":["webpackJsonp([36455625658142],{\n\n/***/ 637:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>工作中少不了跟 ajax 打交道，本着少造轮子的思想，一般都是使用 jquery 的 ajax 接口，同域的 ajax 大家都知道是通过 xhr(XMLHttpRequest) 请求完成， 在jquery 中，jsonp 请求也是调用的 ajax 接口，只是传递的参数不同，而其实跨域的 jsonp 请求其实根本是不同的概念，jsonp根本就没有使用到 xhr 请求。<!--more--></p>\\n<p>xhr 由于同源策略限制的原因，跨域是无法完成的。jsonp 请求其实是在网页中动态的创建了一个 script 请求，这样就相当于创建了一个 GET 请求，就不会受到跨域的限制，例如在域名 abc.com 向 api.abc.com 发起一个 jsonp 请求，其实是在页面中动态插入 <scrtipt src=\\\"http://api.abc.com\\\"></scrtipt>，稍微封装下应该是这样的:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">jsonpRequest</span><span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> script <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'script'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    script<span class=\\\"token punctuation\\\">.</span>src <span class=\\\"token operator\\\">=</span> url<span class=\\\"token punctuation\\\">;</span>\\n    document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementsByTagName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'body'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span>script<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>那如何传递参数，和获取服务器返回的数据呢？传递参数很好解决，直接 url 传参就行了，而获取服务器返回的数据则需要服务器作一定的处理，这里服务器需要返回的并不是 json 数据，而是一个 js 的回调方法的调用，例如 jsonCallback({code:0})， 而这个回调函数则需要我们在页面中定义。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">jsonpCallback</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">.</span>code<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这样，script 请求完成后会直接执行服务器返回的回调方法，也就是我们这里定义的方法。</p>\\n<p>实际上我们的页面上可能会有不止一个 jsonp 的请求，为每个单独请求定义一个回调方法可能比较麻烦，后端的同学也可能会抱怨为每个接口定义指定的调用方法很麻烦，其实我们可以把回调的方法名作为参数传递给后端，而回调方法我们也能通过随机数生成(jquery的做法)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> jsonpCallbackNum <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">jsonpRequest</span><span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">,</span> callback<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    jsonpCallbackNum <span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">var</span> randomCallback <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'jsonpcallback'</span> <span class=\\\"token operator\\\">+</span> jsonpCallbackNum<span class=\\\"token punctuation\\\">;</span>\\n    window<span class=\\\"token punctuation\\\">[</span>randomCallback<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> callback<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">var</span> script <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'script'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    spliter <span class=\\\"token operator\\\">=</span> url<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'?'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">!==</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">'&amp;'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'?'</span><span class=\\\"token punctuation\\\">;</span>\\n    script<span class=\\\"token punctuation\\\">.</span>src <span class=\\\"token operator\\\">=</span> url <span class=\\\"token operator\\\">+</span> spliter <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'jsoncallback='</span> <span class=\\\"token operator\\\">+</span> randomCallback<span class=\\\"token punctuation\\\">;</span>\\n    document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementsByTagName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'body'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span>script<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>恩，实现起来也并不是很难，但我这写得只是 demo，实际的业务中可能还要根据需求定义上面的代码。</p>\",\"excerpt\":\"工作中少不了跟 ajax 打交道，本着少造轮子的思想，一般都是使用 jquery 的 ajax 接口，同域的 ajax 大家都知道是通过 xhr(XMLHttpRequest) 请求完成， 在jquery 中，jsonp…\",\"fields\":{\"slug\":\"/8d76e7d06e\",\"tags\":[{\"name\":\"javascript\",\"slug\":\"de9b9ed78d\"},{\"name\":\"jsonp\",\"slug\":\"8a8604b628\"},{\"name\":\"ajax\",\"slug\":\"2705a83a5a\"}]},\"frontmatter\":{\"date\":\"2014-05-13\",\"path\":\"/principle-of-jsonp\",\"title\":\"jsonp 原理\"}},\"site\":{\"siteMetadata\":{\"disqusShortName\":\"devharry\",\"siteUrl\":\"https://goharry.io\"}}},\"pathContext\":{\"slug\":\"/8d76e7d06e\",\"prev\":{\"excerpt\":\"众所周知的原因，每年的5月35号左右，Google 的全线服务会被无情的封锁一段时间，对于程序员来说，少了 Google 就等于要花费更多的时间和精力和寻找资料和文档，所以如何正确上网很重要。 首先你需要一台 vps，推荐最近新起的 vps…\",\"fields\":{\"slug\":\"/e5dab28c3f\",\"tags\":[{\"name\":\"proxy\",\"slug\":\"431387eb72\"},{\"name\":\"shadowsocks\",\"slug\":\"d210b06881\"}]},\"frontmatter\":{\"path\":\"/usage-of-shadowsocks\",\"title\":\"使用 shadowsocks 正确上网\",\"date\":\"2014-06-12T00:00:00.000Z\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---8-d-76-e-7-d-06-e-a3d92d9d13c974d049b4.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>工作中少不了跟 ajax 打交道，本着少造轮子的思想，一般都是使用 jquery 的 ajax 接口，同域的 ajax 大家都知道是通过 xhr(XMLHttpRequest) 请求完成， 在jquery 中，jsonp 请求也是调用的 ajax 接口，只是传递的参数不同，而其实跨域的 jsonp 请求其实根本是不同的概念，jsonp根本就没有使用到 xhr 请求。<!--more--></p>\\n<p>xhr 由于同源策略限制的原因，跨域是无法完成的。jsonp 请求其实是在网页中动态的创建了一个 script 请求，这样就相当于创建了一个 GET 请求，就不会受到跨域的限制，例如在域名 abc.com 向 api.abc.com 发起一个 jsonp 请求，其实是在页面中动态插入 <scrtipt src=\\\"http://api.abc.com\\\"></scrtipt>，稍微封装下应该是这样的:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">jsonpRequest</span><span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> script <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'script'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    script<span class=\\\"token punctuation\\\">.</span>src <span class=\\\"token operator\\\">=</span> url<span class=\\\"token punctuation\\\">;</span>\\n    document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementsByTagName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'body'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span>script<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>那如何传递参数，和获取服务器返回的数据呢？传递参数很好解决，直接 url 传参就行了，而获取服务器返回的数据则需要服务器作一定的处理，这里服务器需要返回的并不是 json 数据，而是一个 js 的回调方法的调用，例如 jsonCallback({code:0})， 而这个回调函数则需要我们在页面中定义。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">jsonpCallback</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">.</span>code<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这样，script 请求完成后会直接执行服务器返回的回调方法，也就是我们这里定义的方法。</p>\\n<p>实际上我们的页面上可能会有不止一个 jsonp 的请求，为每个单独请求定义一个回调方法可能比较麻烦，后端的同学也可能会抱怨为每个接口定义指定的调用方法很麻烦，其实我们可以把回调的方法名作为参数传递给后端，而回调方法我们也能通过随机数生成(jquery的做法)</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> jsonpCallbackNum <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">jsonpRequest</span><span class=\\\"token punctuation\\\">(</span>url<span class=\\\"token punctuation\\\">,</span> callback<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    jsonpCallbackNum <span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">var</span> randomCallback <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'jsonpcallback'</span> <span class=\\\"token operator\\\">+</span> jsonpCallbackNum<span class=\\\"token punctuation\\\">;</span>\\n    window<span class=\\\"token punctuation\\\">[</span>randomCallback<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> callback<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">var</span> script <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'script'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    spliter <span class=\\\"token operator\\\">=</span> url<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'?'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">!==</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">'&amp;'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'?'</span><span class=\\\"token punctuation\\\">;</span>\\n    script<span class=\\\"token punctuation\\\">.</span>src <span class=\\\"token operator\\\">=</span> url <span class=\\\"token operator\\\">+</span> spliter <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'jsoncallback='</span> <span class=\\\"token operator\\\">+</span> randomCallback<span class=\\\"token punctuation\\\">;</span>\\n    document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementsByTagName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'body'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span>script<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>恩，实现起来也并不是很难，但我这写得只是 demo，实际的业务中可能还要根据需求定义上面的代码。</p>\",\"excerpt\":\"工作中少不了跟 ajax 打交道，本着少造轮子的思想，一般都是使用 jquery 的 ajax 接口，同域的 ajax 大家都知道是通过 xhr(XMLHttpRequest) 请求完成， 在jquery 中，jsonp…\",\"fields\":{\"slug\":\"/8d76e7d06e\",\"tags\":[{\"name\":\"javascript\",\"slug\":\"de9b9ed78d\"},{\"name\":\"jsonp\",\"slug\":\"8a8604b628\"},{\"name\":\"ajax\",\"slug\":\"2705a83a5a\"}]},\"frontmatter\":{\"date\":\"2014-05-13\",\"path\":\"/principle-of-jsonp\",\"title\":\"jsonp 原理\"}},\"site\":{\"siteMetadata\":{\"disqusShortName\":\"devharry\",\"siteUrl\":\"https://goharry.io\"}}},\"pathContext\":{\"slug\":\"/8d76e7d06e\",\"prev\":{\"excerpt\":\"众所周知的原因，每年的5月35号左右，Google 的全线服务会被无情的封锁一段时间，对于程序员来说，少了 Google 就等于要花费更多的时间和精力和寻找资料和文档，所以如何正确上网很重要。 首先你需要一台 vps，推荐最近新起的 vps…\",\"fields\":{\"slug\":\"/e5dab28c3f\",\"tags\":[{\"name\":\"proxy\",\"slug\":\"431387eb72\"},{\"name\":\"shadowsocks\",\"slug\":\"d210b06881\"}]},\"frontmatter\":{\"path\":\"/usage-of-shadowsocks\",\"title\":\"使用 shadowsocks 正确上网\",\"date\":\"2014-06-12T00:00:00.000Z\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/8-d-76-e-7-d-06-e.json\n// module id = 637\n// module chunks = 36455625658142"],"sourceRoot":""}